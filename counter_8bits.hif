HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	wire_2bits.gdf
	{
		wire_2bits [] []
		{
			5 [] [];
		}
	}
	mux_2x1.gdf
	{
		mux_2x1 [] []
		{
			3 [] [];
		}
	}
	engate_in_x2.gdf
	{
		engate_in_x2 [] []
		{
			4 [] [];
		}
	}
	counter_cell.gdf
	{
		counter_cell [] []
		{
			1 [] [];
		}
	}
	mux_4x1.gdf
	{
		mux_4x1 [] []
		{
			2 [] [];
		}
	}
	counter_8bits.gdf
	{
		counter_8bits [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	counter_8bits::(0,0):(0): counter_8bits.gdf
	{
		mux_2x1::(0,0):(23): mux_2x1.gdf;
		engate_in_x2::(0,0):(20): engate_in_x2.gdf
		{
			wire_2bits::(0,0):(6): wire_2bits.gdf;
		}
		counter_cell::(0,0):(1): counter_cell.gdf
		{
			engate_in_x2::(0,0):(32): engate_in_x2.gdf
			{
				wire_2bits:5:(0,0):(6): wire_2bits.gdf;
			}
			mux_2x1::(0,0):(31): mux_2x1.gdf;
			mux_4x1:2:(0,0):(14): mux_4x1.gdf;
		}
		counter_cell::(0,0):(10): counter_cell.gdf
		{
			mux_4x1:2:(0,0):(14): mux_4x1.gdf;
			mux_2x1:3:(0,0):(31): mux_2x1.gdf;
			engate_in_x2:4:(0,0):(32): engate_in_x2.gdf
			{
				wire_2bits:5:(0,0):(6): wire_2bits.gdf;
			}
		}
		counter_cell::(0,0):(14): counter_cell.gdf
		{
			mux_4x1:2:(0,0):(14): mux_4x1.gdf;
			mux_2x1:3:(0,0):(31): mux_2x1.gdf;
			engate_in_x2:4:(0,0):(32): engate_in_x2.gdf
			{
				wire_2bits:5:(0,0):(6): wire_2bits.gdf;
			}
		}
		counter_cell::(0,0):(13): counter_cell.gdf
		{
			mux_4x1:2:(0,0):(14): mux_4x1.gdf;
			mux_2x1:3:(0,0):(31): mux_2x1.gdf;
			engate_in_x2:4:(0,0):(32): engate_in_x2.gdf
			{
				wire_2bits:5:(0,0):(6): wire_2bits.gdf;
			}
		}
		counter_cell::(0,0):(17): counter_cell.gdf
		{
			mux_4x1:2:(0,0):(14): mux_4x1.gdf;
			mux_2x1:3:(0,0):(31): mux_2x1.gdf;
			engate_in_x2:4:(0,0):(32): engate_in_x2.gdf
			{
				wire_2bits:5:(0,0):(6): wire_2bits.gdf;
			}
		}
		counter_cell::(0,0):(16): counter_cell.gdf
		{
			mux_4x1:2:(0,0):(14): mux_4x1.gdf;
			mux_2x1:3:(0,0):(31): mux_2x1.gdf;
			engate_in_x2:4:(0,0):(32): engate_in_x2.gdf
			{
				wire_2bits:5:(0,0):(6): wire_2bits.gdf;
			}
		}
		counter_cell::(0,0):(15): counter_cell.gdf
		{
			mux_4x1:2:(0,0):(14): mux_4x1.gdf;
			mux_2x1:3:(0,0):(31): mux_2x1.gdf;
			engate_in_x2:4:(0,0):(32): engate_in_x2.gdf
			{
				wire_2bits:5:(0,0):(6): wire_2bits.gdf;
			}
		}
		counter_cell::(0,0):(19): counter_cell.gdf
		{
			mux_4x1:2:(0,0):(14): mux_4x1.gdf;
			mux_2x1:3:(0,0):(31): mux_2x1.gdf;
			engate_in_x2:4:(0,0):(32): engate_in_x2.gdf
			{
				wire_2bits:5:(0,0):(6): wire_2bits.gdf;
			}
		}
	}
}
