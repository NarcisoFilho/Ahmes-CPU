HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
}
TREE
{
	ahmes::(0,0):(0): ahmes.gdf
	{
		counter_8bits::(0,0):(2): counter_8bits.gdf
		{
			mux_2x1::(0,0):(23): mux_2x1.gdf;
			engate_in_x2::(0,0):(20): engate_in_x2.gdf
			{
				wire_2bits::(0,0):(6): wire_2bits.gdf;
			}
			counter_cell::(0,0):(1): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
			counter_cell::(0,0):(10): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
			counter_cell::(0,0):(12): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
			counter_cell::(0,0):(14): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
			counter_cell::(0,0):(13): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
			counter_cell::(0,0):(17): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
			counter_cell::(0,0):(16): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
			counter_cell::(0,0):(15): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
			counter_cell::(0,0):(18): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
			counter_cell::(0,0):(19): counter_cell.gdf
			{
				engate_in_x2::(0,0):(32): engate_in_x2.gdf;
				mux_2x1::(0,0):(31): mux_2x1.gdf;
				mux_4x1::(0,0):(14): mux_4x1.gdf;
			}
		}
		ula_ahmes::(0,0):(1): ula_ahmes.gdf
		{
			not_8bits::(0,0):(97): not_8bits.gdf;
			gnd_8b::(0,0):(94): gnd_8b.gdf;
			comparador_8bits::(0,0):(93): comparador_8bits.gdf;
			muxb_16x1::(0,0):(80): muxb_16x1.gdf;
			replicador_8bits::(0,0):(73): replicador_8bits.gdf;
			and2_8bits::(0,0):(71): and2_8bits.gdf;
			or2_8bits::(0,0):(70): or2_8bits.gdf;
			or2_8bits::(0,0):(68): or2_8bits.gdf;
			or2_8bits::(0,0):(67): or2_8bits.gdf;
			mux_16x1_8bits::(0,0):(29): mux_16x1_8bits.gdf
			{
				mux_16x1::(0,0):(119): mux_16x1.gdf
				{
					or16::(0,0):(6): or16.gdf;
					and5::(0,0):(114): and5.gdf;
					and5::(0,0):(109): and5.gdf;
					and5::(0,0):(104): and5.gdf;
					and5::(0,0):(99): and5.gdf;
					and5::(0,0):(94): and5.gdf;
					and5::(0,0):(83): and5.gdf;
					and5::(0,0):(78): and5.gdf;
					and5::(0,0):(73): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(68): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(62): and5.gdf;
					and5::(0,0):(32): and5.gdf;
					and5::(0,0):(56): and5.gdf;
					and5::(0,0):(20): and5.gdf;
					and5::(0,0):(50): and5.gdf;
				}
				mux_16x1::(0,0):(124): mux_16x1.gdf
				{
					or16::(0,0):(6): or16.gdf;
					and5::(0,0):(114): and5.gdf;
					and5::(0,0):(109): and5.gdf;
					and5::(0,0):(104): and5.gdf;
					and5::(0,0):(99): and5.gdf;
					and5::(0,0):(94): and5.gdf;
					and5::(0,0):(83): and5.gdf;
					and5::(0,0):(78): and5.gdf;
					and5::(0,0):(73): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(68): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(62): and5.gdf;
					and5::(0,0):(32): and5.gdf;
					and5::(0,0):(56): and5.gdf;
					and5::(0,0):(20): and5.gdf;
					and5::(0,0):(50): and5.gdf;
				}
				mux_16x1::(0,0):(118): mux_16x1.gdf
				{
					or16::(0,0):(6): or16.gdf;
					and5::(0,0):(114): and5.gdf;
					and5::(0,0):(109): and5.gdf;
					and5::(0,0):(104): and5.gdf;
					and5::(0,0):(99): and5.gdf;
					and5::(0,0):(94): and5.gdf;
					and5::(0,0):(83): and5.gdf;
					and5::(0,0):(78): and5.gdf;
					and5::(0,0):(73): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(68): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(62): and5.gdf;
					and5::(0,0):(32): and5.gdf;
					and5::(0,0):(56): and5.gdf;
					and5::(0,0):(20): and5.gdf;
					and5::(0,0):(50): and5.gdf;
				}
				mux_16x1::(0,0):(123): mux_16x1.gdf
				{
					or16::(0,0):(6): or16.gdf;
					and5::(0,0):(114): and5.gdf;
					and5::(0,0):(109): and5.gdf;
					and5::(0,0):(104): and5.gdf;
					and5::(0,0):(99): and5.gdf;
					and5::(0,0):(94): and5.gdf;
					and5::(0,0):(83): and5.gdf;
					and5::(0,0):(78): and5.gdf;
					and5::(0,0):(73): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(68): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(62): and5.gdf;
					and5::(0,0):(32): and5.gdf;
					and5::(0,0):(56): and5.gdf;
					and5::(0,0):(20): and5.gdf;
					and5::(0,0):(50): and5.gdf;
				}
				mux_16x1::(0,0):(117): mux_16x1.gdf
				{
					or16::(0,0):(6): or16.gdf;
					and5::(0,0):(114): and5.gdf;
					and5::(0,0):(109): and5.gdf;
					and5::(0,0):(104): and5.gdf;
					and5::(0,0):(99): and5.gdf;
					and5::(0,0):(94): and5.gdf;
					and5::(0,0):(83): and5.gdf;
					and5::(0,0):(78): and5.gdf;
					and5::(0,0):(73): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(68): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(62): and5.gdf;
					and5::(0,0):(32): and5.gdf;
					and5::(0,0):(56): and5.gdf;
					and5::(0,0):(20): and5.gdf;
					and5::(0,0):(50): and5.gdf;
				}
				mux_16x1::(0,0):(122): mux_16x1.gdf
				{
					or16::(0,0):(6): or16.gdf;
					and5::(0,0):(114): and5.gdf;
					and5::(0,0):(109): and5.gdf;
					and5::(0,0):(104): and5.gdf;
					and5::(0,0):(99): and5.gdf;
					and5::(0,0):(94): and5.gdf;
					and5::(0,0):(83): and5.gdf;
					and5::(0,0):(78): and5.gdf;
					and5::(0,0):(73): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(68): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(62): and5.gdf;
					and5::(0,0):(32): and5.gdf;
					and5::(0,0):(56): and5.gdf;
					and5::(0,0):(20): and5.gdf;
					and5::(0,0):(50): and5.gdf;
				}
				mux_16x1::(0,0):(116): mux_16x1.gdf
				{
					or16::(0,0):(6): or16.gdf;
					and5::(0,0):(114): and5.gdf;
					and5::(0,0):(109): and5.gdf;
					and5::(0,0):(104): and5.gdf;
					and5::(0,0):(99): and5.gdf;
					and5::(0,0):(94): and5.gdf;
					and5::(0,0):(83): and5.gdf;
					and5::(0,0):(78): and5.gdf;
					and5::(0,0):(73): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(68): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(62): and5.gdf;
					and5::(0,0):(32): and5.gdf;
					and5::(0,0):(56): and5.gdf;
					and5::(0,0):(20): and5.gdf;
					and5::(0,0):(50): and5.gdf;
				}
				mux_16x1::(0,0):(121): mux_16x1.gdf
				{
					or16::(0,0):(6): or16.gdf;
					and5::(0,0):(114): and5.gdf;
					and5::(0,0):(109): and5.gdf;
					and5::(0,0):(104): and5.gdf;
					and5::(0,0):(99): and5.gdf;
					and5::(0,0):(94): and5.gdf;
					and5::(0,0):(83): and5.gdf;
					and5::(0,0):(78): and5.gdf;
					and5::(0,0):(73): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(68): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(62): and5.gdf;
					and5::(0,0):(32): and5.gdf;
					and5::(0,0):(56): and5.gdf;
					and5::(0,0):(20): and5.gdf;
					and5::(0,0):(50): and5.gdf;
				}
			}
			and2_8bits::(0,0):(37): and2_8bits.gdf;
			not_8bits::(0,0):(38): not_8bits.gdf;
			shift_right_reg_8bits::(0,0):(40): shift_right_reg_8bits.gdf;
			shift_left_reg_8bits::(0,0):(41): shift_left_reg_8bits.gdf;
			cla_adder_8bits::(0,0):(42): cla_adder_8bits.gdf;
			gnd_8b::(0,0):(53): gnd_8b.gdf;
			muxb_16x1_8bits::(0,0):(61): muxb_16x1_8bits.gdf
			{
				muxb_16x1::(0,0):(5): muxb_16x1.gdf
				{
					and5::(0,0):(36): and5.gdf;
					and5::(0,0):(37): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(39): and5.gdf;
					and5::(0,0):(40): and5.gdf;
					and5::(0,0):(41): and5.gdf;
					and5::(0,0):(42): and5.gdf;
					and5::(0,0):(43): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(45): and5.gdf;
					and5::(0,0):(46): and5.gdf;
					and5::(0,0):(47): and5.gdf;
					and5::(0,0):(48): and5.gdf;
					and5::(0,0):(49): and5.gdf;
					and5::(0,0):(50): and5.gdf;
					and5::(0,0):(51): and5.gdf;
					or16::(0,0):(53): or16.gdf;
				}
				muxb_16x1::(0,0):(13): muxb_16x1.gdf
				{
					and5::(0,0):(36): and5.gdf;
					and5::(0,0):(37): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(39): and5.gdf;
					and5::(0,0):(40): and5.gdf;
					and5::(0,0):(41): and5.gdf;
					and5::(0,0):(42): and5.gdf;
					and5::(0,0):(43): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(45): and5.gdf;
					and5::(0,0):(46): and5.gdf;
					and5::(0,0):(47): and5.gdf;
					and5::(0,0):(48): and5.gdf;
					and5::(0,0):(49): and5.gdf;
					and5::(0,0):(50): and5.gdf;
					and5::(0,0):(51): and5.gdf;
					or16::(0,0):(53): or16.gdf;
				}
				muxb_16x1::(0,0):(12): muxb_16x1.gdf
				{
					and5::(0,0):(36): and5.gdf;
					and5::(0,0):(37): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(39): and5.gdf;
					and5::(0,0):(40): and5.gdf;
					and5::(0,0):(41): and5.gdf;
					and5::(0,0):(42): and5.gdf;
					and5::(0,0):(43): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(45): and5.gdf;
					and5::(0,0):(46): and5.gdf;
					and5::(0,0):(47): and5.gdf;
					and5::(0,0):(48): and5.gdf;
					and5::(0,0):(49): and5.gdf;
					and5::(0,0):(50): and5.gdf;
					and5::(0,0):(51): and5.gdf;
					or16::(0,0):(53): or16.gdf;
				}
				muxb_16x1::(0,0):(11): muxb_16x1.gdf
				{
					and5::(0,0):(36): and5.gdf;
					and5::(0,0):(37): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(39): and5.gdf;
					and5::(0,0):(40): and5.gdf;
					and5::(0,0):(41): and5.gdf;
					and5::(0,0):(42): and5.gdf;
					and5::(0,0):(43): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(45): and5.gdf;
					and5::(0,0):(46): and5.gdf;
					and5::(0,0):(47): and5.gdf;
					and5::(0,0):(48): and5.gdf;
					and5::(0,0):(49): and5.gdf;
					and5::(0,0):(50): and5.gdf;
					and5::(0,0):(51): and5.gdf;
					or16::(0,0):(53): or16.gdf;
				}
				muxb_16x1::(0,0):(10): muxb_16x1.gdf
				{
					and5::(0,0):(36): and5.gdf;
					and5::(0,0):(37): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(39): and5.gdf;
					and5::(0,0):(40): and5.gdf;
					and5::(0,0):(41): and5.gdf;
					and5::(0,0):(42): and5.gdf;
					and5::(0,0):(43): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(45): and5.gdf;
					and5::(0,0):(46): and5.gdf;
					and5::(0,0):(47): and5.gdf;
					and5::(0,0):(48): and5.gdf;
					and5::(0,0):(49): and5.gdf;
					and5::(0,0):(50): and5.gdf;
					and5::(0,0):(51): and5.gdf;
					or16::(0,0):(53): or16.gdf;
				}
				muxb_16x1::(0,0):(7): muxb_16x1.gdf
				{
					and5::(0,0):(36): and5.gdf;
					and5::(0,0):(37): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(39): and5.gdf;
					and5::(0,0):(40): and5.gdf;
					and5::(0,0):(41): and5.gdf;
					and5::(0,0):(42): and5.gdf;
					and5::(0,0):(43): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(45): and5.gdf;
					and5::(0,0):(46): and5.gdf;
					and5::(0,0):(47): and5.gdf;
					and5::(0,0):(48): and5.gdf;
					and5::(0,0):(49): and5.gdf;
					and5::(0,0):(50): and5.gdf;
					and5::(0,0):(51): and5.gdf;
					or16::(0,0):(53): or16.gdf;
				}
				muxb_16x1::(0,0):(8): muxb_16x1.gdf
				{
					and5::(0,0):(36): and5.gdf;
					and5::(0,0):(37): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(39): and5.gdf;
					and5::(0,0):(40): and5.gdf;
					and5::(0,0):(41): and5.gdf;
					and5::(0,0):(42): and5.gdf;
					and5::(0,0):(43): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(45): and5.gdf;
					and5::(0,0):(46): and5.gdf;
					and5::(0,0):(47): and5.gdf;
					and5::(0,0):(48): and5.gdf;
					and5::(0,0):(49): and5.gdf;
					and5::(0,0):(50): and5.gdf;
					and5::(0,0):(51): and5.gdf;
					or16::(0,0):(53): or16.gdf;
				}
				muxb_16x1::(0,0):(9): muxb_16x1.gdf
				{
					and5::(0,0):(36): and5.gdf;
					and5::(0,0):(37): and5.gdf;
					and5::(0,0):(38): and5.gdf;
					and5::(0,0):(39): and5.gdf;
					and5::(0,0):(40): and5.gdf;
					and5::(0,0):(41): and5.gdf;
					and5::(0,0):(42): and5.gdf;
					and5::(0,0):(43): and5.gdf;
					and5::(0,0):(44): and5.gdf;
					and5::(0,0):(45): and5.gdf;
					and5::(0,0):(46): and5.gdf;
					and5::(0,0):(47): and5.gdf;
					and5::(0,0):(48): and5.gdf;
					and5::(0,0):(49): and5.gdf;
					and5::(0,0):(50): and5.gdf;
					and5::(0,0):(51): and5.gdf;
					or16::(0,0):(53): or16.gdf;
				}
			}
			and2_8bits::(0,0):(65): and2_8bits.gdf;
			replicador_8bits::(0,0):(66): replicador_8bits.gdf;
		}
	}
}
