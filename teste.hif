HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	mux_16x1_8bits.gdf
	{
		mux_16x1_8bits [] []
		{
			1 [] [];
		}
	}
	wire_8bits.gdf
	{
		wire_8bits [] [];
	}
	teste.gdf
	{
		teste [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	teste::(0,0):(0): teste.gdf
	{
		mux_16x1_8bits::(0,0):(26): mux_16x1_8bits.gdf
		{
			escalonador_16x8::(0,0):(131): escalonador_16x8.gdf
			{
				wire_8bits::(0,0):(42): wire_8bits.gdf;
				wire_8bits::(0,0):(51): wire_8bits.gdf;
				wire_8bits::(0,0):(52): wire_8bits.gdf;
				wire_8bits::(0,0):(53): wire_8bits.gdf;
				wire_8bits::(0,0):(54): wire_8bits.gdf;
				wire_8bits::(0,0):(50): wire_8bits.gdf;
				wire_8bits::(0,0):(49): wire_8bits.gdf;
				wire_8bits::(0,0):(48): wire_8bits.gdf;
				wire_8bits::(0,0):(47): wire_8bits.gdf;
				wire_8bits::(0,0):(46): wire_8bits.gdf;
				wire_8bits::(0,0):(41): wire_8bits.gdf;
				wire_8bits::(0,0):(45): wire_8bits.gdf;
				wire_8bits::(0,0):(4): wire_8bits.gdf;
				wire_8bits::(0,0):(44): wire_8bits.gdf;
				wire_8bits::(0,0):(43): wire_8bits.gdf;
			}
			mux_16x1::(0,0):(121): mux_16x1.gdf
			{
				or16::(0,0):(6): or16.gdf;
				and5::(0,0):(114): and5.gdf;
				and5::(0,0):(109): and5.gdf;
				and5::(0,0):(104): and5.gdf;
				and5::(0,0):(99): and5.gdf;
				and5::(0,0):(94): and5.gdf;
				and5::(0,0):(83): and5.gdf;
				and5::(0,0):(78): and5.gdf;
				and5::(0,0):(73): and5.gdf;
				and5::(0,0):(44): and5.gdf;
				and5::(0,0):(68): and5.gdf;
				and5::(0,0):(38): and5.gdf;
				and5::(0,0):(62): and5.gdf;
				and5::(0,0):(32): and5.gdf;
				and5::(0,0):(56): and5.gdf;
				and5::(0,0):(20): and5.gdf;
				and5::(0,0):(50): and5.gdf;
			}
			mux_16x1::(0,0):(116): mux_16x1.gdf
			{
				or16::(0,0):(6): or16.gdf;
				and5::(0,0):(114): and5.gdf;
				and5::(0,0):(109): and5.gdf;
				and5::(0,0):(104): and5.gdf;
				and5::(0,0):(99): and5.gdf;
				and5::(0,0):(94): and5.gdf;
				and5::(0,0):(83): and5.gdf;
				and5::(0,0):(78): and5.gdf;
				and5::(0,0):(73): and5.gdf;
				and5::(0,0):(44): and5.gdf;
				and5::(0,0):(68): and5.gdf;
				and5::(0,0):(38): and5.gdf;
				and5::(0,0):(62): and5.gdf;
				and5::(0,0):(32): and5.gdf;
				and5::(0,0):(56): and5.gdf;
				and5::(0,0):(20): and5.gdf;
				and5::(0,0):(50): and5.gdf;
			}
			mux_16x1::(0,0):(122): mux_16x1.gdf
			{
				or16::(0,0):(6): or16.gdf;
				and5::(0,0):(114): and5.gdf;
				and5::(0,0):(109): and5.gdf;
				and5::(0,0):(104): and5.gdf;
				and5::(0,0):(99): and5.gdf;
				and5::(0,0):(94): and5.gdf;
				and5::(0,0):(83): and5.gdf;
				and5::(0,0):(78): and5.gdf;
				and5::(0,0):(73): and5.gdf;
				and5::(0,0):(44): and5.gdf;
				and5::(0,0):(68): and5.gdf;
				and5::(0,0):(38): and5.gdf;
				and5::(0,0):(62): and5.gdf;
				and5::(0,0):(32): and5.gdf;
				and5::(0,0):(56): and5.gdf;
				and5::(0,0):(20): and5.gdf;
				and5::(0,0):(50): and5.gdf;
			}
			mux_16x1::(0,0):(117): mux_16x1.gdf
			{
				or16::(0,0):(6): or16.gdf;
				and5::(0,0):(114): and5.gdf;
				and5::(0,0):(109): and5.gdf;
				and5::(0,0):(104): and5.gdf;
				and5::(0,0):(99): and5.gdf;
				and5::(0,0):(94): and5.gdf;
				and5::(0,0):(83): and5.gdf;
				and5::(0,0):(78): and5.gdf;
				and5::(0,0):(73): and5.gdf;
				and5::(0,0):(44): and5.gdf;
				and5::(0,0):(68): and5.gdf;
				and5::(0,0):(38): and5.gdf;
				and5::(0,0):(62): and5.gdf;
				and5::(0,0):(32): and5.gdf;
				and5::(0,0):(56): and5.gdf;
				and5::(0,0):(20): and5.gdf;
				and5::(0,0):(50): and5.gdf;
			}
			mux_16x1::(0,0):(123): mux_16x1.gdf
			{
				or16::(0,0):(6): or16.gdf;
				and5::(0,0):(114): and5.gdf;
				and5::(0,0):(109): and5.gdf;
				and5::(0,0):(104): and5.gdf;
				and5::(0,0):(99): and5.gdf;
				and5::(0,0):(94): and5.gdf;
				and5::(0,0):(83): and5.gdf;
				and5::(0,0):(78): and5.gdf;
				and5::(0,0):(73): and5.gdf;
				and5::(0,0):(44): and5.gdf;
				and5::(0,0):(68): and5.gdf;
				and5::(0,0):(38): and5.gdf;
				and5::(0,0):(62): and5.gdf;
				and5::(0,0):(32): and5.gdf;
				and5::(0,0):(56): and5.gdf;
				and5::(0,0):(20): and5.gdf;
				and5::(0,0):(50): and5.gdf;
			}
			mux_16x1::(0,0):(118): mux_16x1.gdf
			{
				or16::(0,0):(6): or16.gdf;
				and5::(0,0):(114): and5.gdf;
				and5::(0,0):(109): and5.gdf;
				and5::(0,0):(104): and5.gdf;
				and5::(0,0):(99): and5.gdf;
				and5::(0,0):(94): and5.gdf;
				and5::(0,0):(83): and5.gdf;
				and5::(0,0):(78): and5.gdf;
				and5::(0,0):(73): and5.gdf;
				and5::(0,0):(44): and5.gdf;
				and5::(0,0):(68): and5.gdf;
				and5::(0,0):(38): and5.gdf;
				and5::(0,0):(62): and5.gdf;
				and5::(0,0):(32): and5.gdf;
				and5::(0,0):(56): and5.gdf;
				and5::(0,0):(20): and5.gdf;
				and5::(0,0):(50): and5.gdf;
			}
			mux_16x1::(0,0):(124): mux_16x1.gdf
			{
				or16::(0,0):(6): or16.gdf;
				and5::(0,0):(114): and5.gdf;
				and5::(0,0):(109): and5.gdf;
				and5::(0,0):(104): and5.gdf;
				and5::(0,0):(99): and5.gdf;
				and5::(0,0):(94): and5.gdf;
				and5::(0,0):(83): and5.gdf;
				and5::(0,0):(78): and5.gdf;
				and5::(0,0):(73): and5.gdf;
				and5::(0,0):(44): and5.gdf;
				and5::(0,0):(68): and5.gdf;
				and5::(0,0):(38): and5.gdf;
				and5::(0,0):(62): and5.gdf;
				and5::(0,0):(32): and5.gdf;
				and5::(0,0):(56): and5.gdf;
				and5::(0,0):(20): and5.gdf;
				and5::(0,0):(50): and5.gdf;
			}
			mux_16x1::(0,0):(119): mux_16x1.gdf
			{
				or16::(0,0):(6): or16.gdf;
				and5::(0,0):(114): and5.gdf;
				and5::(0,0):(109): and5.gdf;
				and5::(0,0):(104): and5.gdf;
				and5::(0,0):(99): and5.gdf;
				and5::(0,0):(94): and5.gdf;
				and5::(0,0):(83): and5.gdf;
				and5::(0,0):(78): and5.gdf;
				and5::(0,0):(73): and5.gdf;
				and5::(0,0):(44): and5.gdf;
				and5::(0,0):(68): and5.gdf;
				and5::(0,0):(38): and5.gdf;
				and5::(0,0):(62): and5.gdf;
				and5::(0,0):(32): and5.gdf;
				and5::(0,0):(56): and5.gdf;
				and5::(0,0):(20): and5.gdf;
				and5::(0,0):(50): and5.gdf;
			}
		}
	}
}
